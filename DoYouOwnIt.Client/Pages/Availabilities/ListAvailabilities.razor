@page "/formats/{FormatId:int}/availabilities"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IAvailabilityService AvailabilityService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<hr />
<div class="availabilities-container">
    <h3>Available Places for Purchase</h3>
    <button class="btn btn-primary" mb-2 @onclick="CreateAvailability">
	    Create Availability
    </button>
    <br />

    <input @bind="formatFilter" placeholder="Search Stores by Name..." class="form-control mb-3" />
    <QuickGrid Items="filteredAvailabilities" Pagination="paginationState">
        <TemplateColumn>
            <ChildContent Context="a">
                @if (!string.IsNullOrEmpty(a.Store.LogoURL))
                {
                    <a href="@a.URL"><img src="@a.Store.LogoURL" alt="@a.Store.Name Logo" style="max-width: 100px; max-height: 100px;" /></a>
                }
                else
                {
                    <span>No Logo</span>
                }
		    </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property=" a => a.Store.Name" Title="Store Name" Sortable="true"/>
	    <PropertyColumn Property=" a => a.CurrencyCode" Title="Currency" Sortable="true" />
        <PropertyColumn Property=" a => a.Price" Title="Price" Sortable="true"/>
        <PropertyColumn Property=" a => a.UnitSold" Title="Per Unit Sold" Sortable="true"/>
        <TemplateColumn Context="availability">
            <a href="@($"/formats/{CreateIDHash(FormatId)}/availabilities/{availability.Id}/edit")">Edit Availability</a>
	    </TemplateColumn>
    </QuickGrid>
</div>

<div class="page-buttons">
    Page(s):
    @if (paginationState.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= paginationState.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex; // Capture the current page index
            <button @onclick="@(() => GoToPageAsync(capturedIndex))" 
                class="btn btn-primary @PageButtonClass(capturedIndex)" 
                aria-current="@AriaCurrentValue(capturedIndex)" 
                aria-label="Go to page @(pageIndex + 1)"> 
                @(pageIndex + 1) 
            </button>
        }
    }
</div>


@code {
    [Parameter]
    public int FormatId { get; set; }
    private string formatFilter = string.Empty;

    PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };

    private List<AvailabilityResponse> availabilities = new List<AvailabilityResponse>();
    private IQueryable<AvailabilityResponse>? queryableAvailabilities;
    private IQueryable<AvailabilityResponse>? filteredAvailabilities => queryableAvailabilities?.Where(f => f.Store.Name.Contains(formatFilter, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnParametersSetAsync()
    {
        if (FormatId > 0)
        {
            await LoadAvailabilities();
        }
    }

    private async Task LoadAvailabilities()
    {
        try
        {
            var response = await Http.GetAsync($"api/Availability/format/{FormatId}");

            // Add this debug output
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                var result = await Http.GetFromJsonAsync<List<AvailabilityResponse>>($"api/Availability/format/{FormatId}");
                queryableAvailabilities = result?.AsQueryable();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading formats: {ex.Message}");
        }
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await paginationState.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex) => paginationState.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex) => paginationState.CurrentPageIndex == pageIndex ? "page" : null;

    private int DecodeHash(string hash)
    {
        var sqids = new SqidsEncoder<int>(new()
        {
            MinLength = 6,
            Alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
        });
        var realId = sqids.Decode(hash).Single();
        return realId;
    }

    private string CreateIDHash(int Id)
    {
        var sqids = new SqidsEncoder<int>(new()
        {
            MinLength = 6,
            Alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
        });
        var hash = sqids.Encode(Id);
        return hash;
    }
    
    private void CreateAvailability()
    {
        NavigationManager.NavigateTo($"/formats/{CreateIDHash(FormatId)}/availabilities/create");
	}

}
